{"ts":1361137257987,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require(\"express\"); // imports express\nvar app = express();        // create a new instance of express\n\n// This is for serving files in the static directory\napp.get(\"/static/:staticFilename\", function (request, response) {\n    response.sendfile(\"static/\" + request.params.staticFilename);\n});\n\n\nfunction initServer() {\n    loadData();\n}\n\nfunction loadData() {\n    loadQuestions();\n    loadStudents();\n}\n\n//read file with questions data and populate questions data structure \nfunction loadQuestions() {\n\n}\n\n//read file with students data and populate students data structure \nfunction loadStudents() {\n\n}\n\nfunction answerQuestion() {\n    //update question data\n    //update student data\n}\n\nfunction showQuestion(questionId) {\n    //for each student, get question by  questionId from questions data structure\n    //and update student's question data to contain it\n}\n\n\nfunction showAnswer(questionId) {\n    //for each student, get answer of questionId from questions data structure\n    //and update student's question data with answer\n}\n\n\n// Finally, initialize the server, then activate the server at port 8889\ninitServer();\napp.listen(8889);\n"]],"start1":0,"start2":0,"length1":0,"length2":1155}]],"length":1155}
{"contributors":[],"silentsave":false,"ts":1361811417859,"patch":[[{"diffs":[[0," express"],[1,"\nvar fs = require(\"fs\");\n\napp.use(express.bodyParser());"],[0,"\n\n// Thi"]],"start1":108,"start2":108,"length1":16,"length2":72},{"diffs":[[0,");\n});\n\n"],[1,"// This is for serving files in the static directory\napp.get(\"/static/styles/:staticFilename\", function (request, response) {\n    response.sendfile(\"static/styles/\" + request.params.staticFilename);\n});\n\nvar questions;\nvar students;\nvar studentCounter;\n\nfunction question() {\n    var exports = {};\n\n    exports.text = \"\";\n\n    exports.choices = [];\n\n    exports.answer = -1;\n\n    exports.topic = \"\";\n\n    exports.explanation = \"\";\n\n    return exports;\n\n}\n"],[0,"\nfunctio"]],"start1":356,"start2":356,"length1":16,"length2":471},{"diffs":[[0,"Data();\n"],[1,"    studentCounter = 0;\n"],[0,"}\n\nfunct"]],"start1":852,"start2":852,"length1":16,"length2":40},{"diffs":[[0,"\n\n//"],[-1,"read file with questions data and populate questions data structure \nfunction loadQuestions() {\n\n}\n\n//read file with students data and populate students data structure \nfunction loadStudents() {\n\n}\n\nfunction answerQuestion() {\n    //update question data\n    //update student data\n}\n\nfunction showQues"],[1," Asynchronously read file contents, then call callbackFn\nfunction readFile(filename, defaultData, callbackFn) {\n  fs.readFile(filename, function(err, data) {\n    if (err) {\n      console.log(\"Error reading file: \", filename);\n      data = defaultData;\n    } else {\n      console.log(\"Success reading file: \", filename);\n    }\n    if (callbackFn) callbackFn(err, data);\n  });\n}\n\n// Asynchronously write file contents, then call callbackFn\nfunction writeFile(filename, data, callbackFn) {\n  fs.writeFile(filename, data, function(err) {\n    if (err) {\n      console.log(\"Error writing file: \", filename);\n    } else {\n      console.log(\"Success writing file: \", filename);\n    }\n    if (callbackFn) callbackFn(err);\n  });\n}\n\n//read file with questions data and populate questions data structure \nfunction loadQuestions() {\n    var empty = \"[]\";\n    readFile(\"questions.txt\", empty, function(err, data) {\n        questions = JSON.parse(data)\n    });\n}\n\n//read file with students data and populate students data structure \nfunction loadStudents() {\n    var empty = \"[]\";\n    readFile(\"students.txt\", empty, function(err, data) {\n        students = JSON.parse(data)\n    });\n}\n\napp.get(\"/studentId\", function(request, response){\n    //intial client/server interaction, requests teh student ID from the server\n    studentCounter++;\n    var name = request.params.name;\n\n    students[studentCounter] = { \"id\" : studentCounter,\n                                 \"name\" : name,\n                                 \"responses\" : \"[]\" };\n\n    response.send({\n        studentId : studentCounter,\n        success : true\n    });\n    \n    writeFile(\"students.txt\", JSON.stringify(students));\n\n});\n\n\n//the id in the url is the student id\napp.post(\"/studentAnswer/:id\", func"],[0,"tion("],[1,"re"],[0,"quest"],[-1,"ionId) {\n    //for each student, get question by  questionId from questions data structure\n    //and update student's question data to contain it\n}\n\n\nfunction showAnswer(questionId) {\n    //for each student, get answer of questionId from questions data structure\n    //and update student's question data with answer\n}\n"],[1,", response){\n    \n    var studentId = request.params.id;\n    //studentAnswers is a 2d array of the question id and the student's response:\n    //i.e. [ [qId_1, a_1] , [qId_2, a_2] . . . ]\n    var studentAnswers = request.body.studentAnswers;\n    //rightAnswers gets filled the same way in the forEach loop with the correct \n    //answers instead of the student answers along with the teacher explanation of the answer\n    //as a third element\n    var rightAnswers = [];\n\n    studentAnswers.forEach(function(x) {\n        var questionId = x[0];\n        var studentAnswer = x[1];\n        var rightAnswer = questions[questionId].answer;\n        var explanation = questions[questionId].explanation;\n\n        rightAnswers.push([questionId, rightAnswer, explanation]);\n        students[studentId].responses[questionId] = studentAnswer;\n    });\n    \n    writeFile(\"students.txt\", JSON.stringify(students));\n\n    response.send({\n        rightAnswers : rightAnswers;\n        success: true\n    });\n    \n});\n\n\n\napp.get(\"/question/:id\", function(request, response){\n    //responds with question and choices of given id\n    var id = request.params.id;\n    \n    if(id < questions.length) {\n        response.send({\n            question : questions[id].text,\n            choices : question[id].choices,\n            success : true\n        });\n    }\n\n    else {\n        response.send({\n            success:false\n        });\n    }\n});\n\napp.post(\"/newquestion\", function(request, response){\n    q = new question();\n    console.log(request.body);\n    q.text = request.body.question;\n    q.choices = request.body.choices;\n    q.answer = request.body.answer;\n\n    questions.push(q);\n\n    response.send({\n        questions: questions,\n        success : true\n    });\n});\n\napp.get(\"/questions\", function (request, response) {\n    response.send({\n        questions : questions,\n        success : true\n    });\n});"],[0,"\n\n//"]],"start1":951,"start2":951,"length1":636,"length2":3654}]],"length":4708,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361994882426,"patch":[[{"diffs":[[0,"question"],[-1,"s"],[1,"Queue;\nvar questions;\nvar questionCounter"],[0,";\nvar st"]],"start1":572,"start2":572,"length1":17,"length2":57},{"diffs":[[0,"Counter;"],[1,"\nvar counter;"],[0,"\n\nfuncti"]],"start1":648,"start2":648,"length1":16,"length2":29},{"diffs":[[0,"orts = {};\n\n"],[1,"    exports.id = -1;\n\n"],[0,"    exports."]],"start1":704,"start2":704,"length1":24,"length2":46},{"diffs":[[0," });\n}\n\n"],[1,"function quizTimer(){\n\tcount = count-1;\n\tif (count <= 0){\n\t\tcount = 10; //default quiz time\n\t\tclearInterval(counter);\n        questionQueue = [];\n\t\treturn;\n\t}\n}\n\n"],[0,"app."],[-1,"ge"],[1,"pos"],[0,"t(\"/stud"]],"start1":2193,"start2":2193,"length1":22,"length2":185},{"diffs":[[0,"    "],[-1,"studentCounter++;\n    var name = request.params.nam"],[1,"var id = request.body.studentId;\n    console.log(id);\n    var found = fals"],[0,"e;\n"],[-1,"\n"],[0,"    "],[-1,"students[studentCounter] = { \"id\" : studentCounter,"],[1,"for(var i in students){\n        if(students[i] !== null && students[i].id === id){\n            found = true;"],[0,"\n   "]],"start1":2495,"start2":2495,"length1":118,"length2":197},{"diffs":[[0,"    "],[1,"break;\n"],[0,"        "],[1,"}\n"],[0,"    "],[1,"}\n"],[0,"    "],[-1,"     \"name\" : name,\n     "],[1,"if(!found){\n        students[++studentCounter] = {id : id,\n"],[0,"    "]],"start1":2697,"start2":2697,"length1":49,"length2":94},{"diffs":[[0,"\" : "],[-1,"\""],[0,"[]"],[-1,"\""],[0," };\n\n"],[1,"        writeFile(\"students.txt\", JSON.stringify(students));\n    }\n\n"],[0,"    "]],"start1":2825,"start2":2825,"length1":17,"length2":83},{"diffs":[[0,"entId : "],[-1,"studentCounter"],[1,"id"],[0,",\n      "]],"start1":2936,"start2":2936,"length1":30,"length2":18},{"diffs":[[0," });"],[-1,"\n    \n    writeFile(\"students.txt\", JSON.stringify(students));"],[0,"\n\n})"]],"start1":2974,"start2":2974,"length1":70,"length2":8},{"diffs":[[0,".params.id;\n"],[1,"    console.log(\"The student that is sending data is: \" + studentId);\n"],[0,"    //studen"]],"start1":3116,"start2":3116,"length1":24,"length2":94},{"diffs":[[0,"entAnswers;\n"],[1,"    console.log(\"And here are his answers: \" + studentAnswers);\n"],[0,"    //rightA"]],"start1":3371,"start2":3371,"length1":24,"length2":88},{"diffs":[[0," = x"],[-1,"[0]"],[1,".name"],[0,";\n  "]],"start1":3739,"start2":3739,"length1":11,"length2":13},{"diffs":[[0," = x"],[-1,"[1]"],[1,".value"],[0,";\n  "]],"start1":3775,"start2":3775,"length1":11,"length2":14},{"diffs":[[0,"    "],[-1,"students[studentId].responses[questionId] = studentAnswer;"],[1,"for(item in students){\n            if(students[item] !== null && students[item].id === studentId){\n                console.log(\"The student is: \" + students[item].id);\n\n                //more correct\n                // students[item].responses = {questionId : studentAnswer};\n                console.log(students[item].responses);\n                \n                students[item].responses[questionId] = studentAnswer;\n                console.log(\"The student answer is: \" + studentAnswer);\n                console.log(\"The student answer is: \" + students[item].responses[questionId]);\n            }\n        }"],[0,"\n   "]],"start1":3976,"start2":3976,"length1":66,"length2":616},{"diffs":[[0,"rightAnswers"],[-1,";"],[1,","],[0,"\n        suc"]],"start1":4703,"start2":4703,"length1":25,"length2":25},{"diffs":[[0,");\n\n"],[-1,"\n"],[1,"//teacher sends list of ids of questions on next quiz\n//those questions are put in to question queue"],[0,"\napp."],[-1,"ge"],[1,"pos"],[0,"t(\"/"],[1,"ask"],[0,"question"],[-1,"/:id"],[1,"s"],[0,"\", f"]],"start1":4753,"start2":4753,"length1":32,"length2":132},{"diffs":[[0,"nse)"],[1," "],[0,"{\n    "],[-1,"//resp"],[1,"console.log(\"asked\");\n    var questi"],[0,"on"],[1,"I"],[0,"ds "],[-1,"with question and choices of given id"],[1,"= request.body.questionIds;\n    count = request.body.time;\n    questionQueue = [];\n    console.log(\"The question ids are: \");\n    console.log(questionIds);\n"],[0,"\n    "],[1,"for("],[0,"var id "],[-1,"= re"],[1,"in "],[0,"quest"],[-1,".params.id;"],[1,"ionIds){"],[0,"\n    "],[-1,"\n"],[0,"    "],[-1,"if(id < questions.length) {\n        response.send({\n            "],[1,"console.log(\"The id \" + questionIds[id]);\n        questionQueue.push({\"id\" : questionIds[id],\n                                \""],[0,"question"],[1,"\""],[0," : q"]],"start1":4907,"start2":4907,"length1":176,"length2":390},{"diffs":[[0,"estions["],[-1,"id"],[1,"questionIds[id]"],[0,"].text,\n"]],"start1":5298,"start2":5298,"length1":18,"length2":31},{"diffs":[[0,"        "],[1,"       "],[1,"             \""],[0,"choices"],[1,"\""],[0," : quest"]],"start1":5333,"start2":5333,"length1":23,"length2":45},{"diffs":[[0,"tion"],[1,"s[questionIds"],[0,"[id]"],[1,"]"],[0,".choices"],[1,"});\n    }\n    response.send({\n        success : true\n    });\n    \n    counter = setInterval(quizTimer, 1000);\n\n});\n\n//when student requests questions, they get the current queue \n//the teacher formed.\napp.get(\"/getquestions\", function(request, response) {\n    console.log(\"getting\");\n    if(questionQueue !== undefined && questionQueue.length > 0){\n        console.log(\"gotten\");\n        response.send({\n            quiz : questionQueue,\n            time : count"],[0,",\n  "]],"start1":5377,"start2":5377,"length1":20,"length2":496},{"diffs":[[0,"  }\n"],[-1,"\n"],[0,"    else"],[-1," "],[0,"{"],[1,"\n        console.log(\"not gotten\");"],[0,"\n   "]],"start1":5912,"start2":5912,"length1":19,"length2":52},{"diffs":[[0," success"],[-1,":"],[1," : "],[0,"false\n  "]],"start1":5996,"start2":5996,"length1":17,"length2":19},{"diffs":[[0,"\n    }\n});\n\n"],[1,"//saves changes made to object through analysis, added a couple methods\napp.post(\"/saveAnalysis\", function(request, response){\n    students = request.body.students;\n    var quiz = request.body.quiz;\n    quiz.forEach(function(x){\n        var id = x.id;\n        questions[id] = x;\n    })\n})\napp.get(\"/studentResults\", function(request, response){\n    response.send({\n        students : students,\n        success : true\n    });\n});\n\n\n"],[0,"app.post(\"/n"]],"start1":6024,"start2":6024,"length1":24,"length2":455},{"diffs":[[0,"er;\n"],[-1,"\n    questions.push(q)"],[1,"    q.topic = request.body.topic;\n    q.id = questionCounter++;\n\n    questions[q.id] = q"],[0,";\n\n "]],"start1":6682,"start2":6682,"length1":30,"length2":96}]],"length":7108,"saved":false}
{"ts":1361994915889,"patch":[[{"diffs":[[0,"\n    })\n"],[1,"    response.send({\n        success: true\n    })\n"],[0,"})\napp.g"]],"start1":6314,"start2":6314,"length1":16,"length2":65}]],"length":7157,"saved":false}
