{"ts":1361137257987,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require(\"express\"); // imports express\nvar app = express();        // create a new instance of express\n\n// This is for serving files in the static directory\napp.get(\"/static/:staticFilename\", function (request, response) {\n    response.sendfile(\"static/\" + request.params.staticFilename);\n});\n\n\nfunction initServer() {\n    loadData();\n}\n\nfunction loadData() {\n    loadQuestions();\n    loadStudents();\n}\n\n//read file with questions data and populate questions data structure \nfunction loadQuestions() {\n\n}\n\n//read file with students data and populate students data structure \nfunction loadStudents() {\n\n}\n\nfunction answerQuestion() {\n    //update question data\n    //update student data\n}\n\nfunction showQuestion(questionId) {\n    //for each student, get question by  questionId from questions data structure\n    //and update student's question data to contain it\n}\n\n\nfunction showAnswer(questionId) {\n    //for each student, get answer of questionId from questions data structure\n    //and update student's question data with answer\n}\n\n\n// Finally, initialize the server, then activate the server at port 8889\ninitServer();\napp.listen(8889);\n"]],"start1":0,"start2":0,"length1":0,"length2":1155}]],"length":1155}
{"contributors":[],"silentsave":false,"ts":1361811417859,"patch":[[{"diffs":[[0," express"],[1,"\nvar fs = require(\"fs\");\n\napp.use(express.bodyParser());"],[0,"\n\n// Thi"]],"start1":108,"start2":108,"length1":16,"length2":72},{"diffs":[[0,");\n});\n\n"],[1,"// This is for serving files in the static directory\napp.get(\"/static/styles/:staticFilename\", function (request, response) {\n    response.sendfile(\"static/styles/\" + request.params.staticFilename);\n});\n\nvar questions;\nvar students;\nvar studentCounter;\n\nfunction question() {\n    var exports = {};\n\n    exports.text = \"\";\n\n    exports.choices = [];\n\n    exports.answer = -1;\n\n    exports.topic = \"\";\n\n    exports.explanation = \"\";\n\n    return exports;\n\n}\n"],[0,"\nfunctio"]],"start1":356,"start2":356,"length1":16,"length2":471},{"diffs":[[0,"Data();\n"],[1,"    studentCounter = 0;\n"],[0,"}\n\nfunct"]],"start1":852,"start2":852,"length1":16,"length2":40},{"diffs":[[0,"\n\n//"],[-1,"read file with questions data and populate questions data structure \nfunction loadQuestions() {\n\n}\n\n//read file with students data and populate students data structure \nfunction loadStudents() {\n\n}\n\nfunction answerQuestion() {\n    //update question data\n    //update student data\n}\n\nfunction showQues"],[1," Asynchronously read file contents, then call callbackFn\nfunction readFile(filename, defaultData, callbackFn) {\n  fs.readFile(filename, function(err, data) {\n    if (err) {\n      console.log(\"Error reading file: \", filename);\n      data = defaultData;\n    } else {\n      console.log(\"Success reading file: \", filename);\n    }\n    if (callbackFn) callbackFn(err, data);\n  });\n}\n\n// Asynchronously write file contents, then call callbackFn\nfunction writeFile(filename, data, callbackFn) {\n  fs.writeFile(filename, data, function(err) {\n    if (err) {\n      console.log(\"Error writing file: \", filename);\n    } else {\n      console.log(\"Success writing file: \", filename);\n    }\n    if (callbackFn) callbackFn(err);\n  });\n}\n\n//read file with questions data and populate questions data structure \nfunction loadQuestions() {\n    var empty = \"[]\";\n    readFile(\"questions.txt\", empty, function(err, data) {\n        questions = JSON.parse(data)\n    });\n}\n\n//read file with students data and populate students data structure \nfunction loadStudents() {\n    var empty = \"[]\";\n    readFile(\"students.txt\", empty, function(err, data) {\n        students = JSON.parse(data)\n    });\n}\n\napp.get(\"/studentId\", function(request, response){\n    //intial client/server interaction, requests teh student ID from the server\n    studentCounter++;\n    var name = request.params.name;\n\n    students[studentCounter] = { \"id\" : studentCounter,\n                                 \"name\" : name,\n                                 \"responses\" : \"[]\" };\n\n    response.send({\n        studentId : studentCounter,\n        success : true\n    });\n    \n    writeFile(\"students.txt\", JSON.stringify(students));\n\n});\n\n\n//the id in the url is the student id\napp.post(\"/studentAnswer/:id\", func"],[0,"tion("],[1,"re"],[0,"quest"],[-1,"ionId) {\n    //for each student, get question by  questionId from questions data structure\n    //and update student's question data to contain it\n}\n\n\nfunction showAnswer(questionId) {\n    //for each student, get answer of questionId from questions data structure\n    //and update student's question data with answer\n}\n"],[1,", response){\n    \n    var studentId = request.params.id;\n    //studentAnswers is a 2d array of the question id and the student's response:\n    //i.e. [ [qId_1, a_1] , [qId_2, a_2] . . . ]\n    var studentAnswers = request.body.studentAnswers;\n    //rightAnswers gets filled the same way in the forEach loop with the correct \n    //answers instead of the student answers along with the teacher explanation of the answer\n    //as a third element\n    var rightAnswers = [];\n\n    studentAnswers.forEach(function(x) {\n        var questionId = x[0];\n        var studentAnswer = x[1];\n        var rightAnswer = questions[questionId].answer;\n        var explanation = questions[questionId].explanation;\n\n        rightAnswers.push([questionId, rightAnswer, explanation]);\n        students[studentId].responses[questionId] = studentAnswer;\n    });\n    \n    writeFile(\"students.txt\", JSON.stringify(students));\n\n    response.send({\n        rightAnswers : rightAnswers;\n        success: true\n    });\n    \n});\n\n\n\napp.get(\"/question/:id\", function(request, response){\n    //responds with question and choices of given id\n    var id = request.params.id;\n    \n    if(id < questions.length) {\n        response.send({\n            question : questions[id].text,\n            choices : question[id].choices,\n            success : true\n        });\n    }\n\n    else {\n        response.send({\n            success:false\n        });\n    }\n});\n\napp.post(\"/newquestion\", function(request, response){\n    q = new question();\n    console.log(request.body);\n    q.text = request.body.question;\n    q.choices = request.body.choices;\n    q.answer = request.body.answer;\n\n    questions.push(q);\n\n    response.send({\n        questions: questions,\n        success : true\n    });\n});\n\napp.get(\"/questions\", function (request, response) {\n    response.send({\n        questions : questions,\n        success : true\n    });\n});"],[0,"\n\n//"]],"start1":951,"start2":951,"length1":636,"length2":3654}]],"length":4708,"saved":false}
